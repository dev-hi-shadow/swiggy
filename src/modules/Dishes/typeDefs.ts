import {
  GraphQLBoolean,
  GraphQLFloat,
  GraphQLInt,
  GraphQLList,
  GraphQLObjectType,
  GraphQLInputObjectType,
  GraphQLString,
  GraphQLEnumType,
} from "graphql";
import { GraphQLJSONObject } from "graphql-type-json";
import { GraphQLDate, GraphQLTime } from "../../utils/typeDefs";
 import { CategoryType } from "../Categories/typeDefs";
import { SubCategoryType } from "../Sub-categories/typeDefs";
import { BranchType } from "../RBranches/typeDefs";
import {
  DIngredientInputType,
  DIngredientsType,
} from "../DIngredients/typeDefs";
 import { RestaurantType } from "../Restaurants/typeDefs";
import { DCustomizationType } from "../IDCustomizations/typeDefs";


const commonDishFields = {
  id: { type: GraphQLInt },
  restaurant_id: { type: GraphQLInt },
  branch_id: { type: GraphQLInt },
  category_id: { type: GraphQLInt },
  subcategory_id: { type: GraphQLInt },
  name: { type: GraphQLString },
  slug: { type: GraphQLString },
  description: { type: GraphQLString },
  image: { type: GraphQLString },
  banner_image: { type: GraphQLString },
  price: { type: GraphQLFloat },
  original_price: { type: GraphQLFloat },
  currency: { type: GraphQLString },
  discount_percentage: { type: GraphQLFloat },
  is_available: { type: GraphQLBoolean },
  is_veg: { type: GraphQLBoolean },
  is_customizable: { type: GraphQLBoolean },
  spicy_level: { type: GraphQLString },
  preparation_time_minutes: { type: GraphQLInt },
  dietary_tags: { type: GraphQLJSONObject },
  ingredients: { type: GraphQLString },
  availability_start_time: { type: GraphQLTime },
  availability_end_time: { type: GraphQLTime },
  stock_quantity: { type: GraphQLInt },
  min_order_qty: { type: GraphQLInt },
  max_order_qty: { type: GraphQLInt },
  rating: { type: GraphQLFloat },
  approval_status: { type: GraphQLString },
  rejection_reason: { type: GraphQLString },
  created_at: { type: GraphQLDate },
  updated_at: { type: GraphQLDate },
  deleted_at: { type: GraphQLDate },
  parent_dish_id: { type: GraphQLInt },
  long_description: { type: GraphQLString },
  gallery_images: { type: GraphQLJSONObject },
  video_url: { type: GraphQLString },
  tags: { type: GraphQLJSONObject },

  price_unit: {
    type: new GraphQLEnumType({
      name: "PriceUnit",
      values: {
        per_item: { value: "per_item" },
        per_kg: { value: "per_kg" },
        per_litre: { value: "per_litre" },
        per_person: { value: "per_person" },
      },
    }),
  },
  tax_percentage: { type: GraphQLFloat },
  tax_inclusive: { type: GraphQLBoolean },
  service_charge_percentage: { type: GraphQLFloat },
  packaging_charge: { type: GraphQLFloat },

  discount_type: {
    type: new GraphQLEnumType({
      name: "DiscountType",
      values: {
        fixed: { value: "fixed" },
        percentage: { value: "percentage" },
      },
    }),
  },
  discount_amount: { type: GraphQLFloat },
  discount_start_time: { type: GraphQLDate },
  discount_end_time: { type: GraphQLDate },
  discount_max_quantity: { type: GraphQLInt },
  discount_min_quantity: { type: GraphQLInt },
  discount_max_quantity_per_user: { type: GraphQLInt },
  discount_min_quantity_per_user: { type: GraphQLInt },
  discount_max_quantity_per_order: { type: GraphQLInt },
  discount_min_quantity_per_order: { type: GraphQLInt },
  discount_applies_with_coupon: { type: GraphQLBoolean },
  promo_code_applicable: { type: GraphQLBoolean },
  availability_days: { type: GraphQLJSONObject },
  blackout_dates: { type: GraphQLJSONObject },
  preorder_available: { type: GraphQLBoolean },
  preorder_hours: { type: GraphQLInt },
  delivery_eta_minutes: { type: GraphQLInt },
  delivery_buffer_minutes: { type: GraphQLInt },
  available_portions: { type: GraphQLInt },
  ingredients_options: { type: GraphQLJSONObject },
  customization_groups: { type: GraphQLJSONObject },
  allergen_info: { type: GraphQLJSONObject },
  allergens: { type: GraphQLJSONObject },
  addons_group_ids: { type: GraphQLJSONObject },
  variant_group_ids: { type: GraphQLJSONObject },
  combo_group_id: { type: GraphQLInt },
  is_part_of_combo: { type: GraphQLBoolean },
  meal_time_tags: { type: GraphQLJSONObject },
  featured: { type: GraphQLBoolean },
  is_featured: { type: GraphQLBoolean },
  is_new: { type: GraphQLBoolean },
  is_popular: { type: GraphQLBoolean },
  is_recommended: { type: GraphQLBoolean },
  is_best_seller: { type: GraphQLBoolean },
  is_chef_special: { type: GraphQLBoolean },
  is_available_for_delivery: { type: GraphQLBoolean },
  is_available_for_pickup: { type: GraphQLBoolean },
  is_available_for_dine_in: { type: GraphQLBoolean },
  is_available_for_takeaway: { type: GraphQLBoolean },
  language_tags: { type: GraphQLJSONObject },
  regional_exclusivity: { type: GraphQLJSONObject },
  cuisine_type: { type: GraphQLJSONObject },
  name_translations: { type: GraphQLJSONObject },
  description_translations: { type: GraphQLJSONObject },
  seo_title: { type: GraphQLString },
  seo_description: { type: GraphQLString },
  promo_tags: { type: GraphQLJSONObject },
  share_url: { type: GraphQLString },
  total_reviews: { type: GraphQLInt },
  average_rating: { type: GraphQLFloat },
  total_orders: { type: GraphQLInt },
  reorder_rate: { type: GraphQLFloat },
  cart_additions: { type: GraphQLInt },
  view_count: { type: GraphQLInt },
  conversion_rate: { type: GraphQLFloat },
  user_likes_count: { type: GraphQLInt },
  order_count: { type: GraphQLInt },
  reorder_probability: { type: GraphQLFloat },
  smart_tags: { type: GraphQLJSONObject },
  kitchen_station: { type: GraphQLString },
  priority_order: { type: GraphQLInt },
  shelf_life_hours: { type: GraphQLInt },
  is_ready_to_eat: { type: GraphQLBoolean },
  fssai_info: { type: GraphQLJSONObject },
  auto_tags: { type: GraphQLJSONObject },
  paired_dish_ids: { type: GraphQLJSONObject },
};

export const DishType = new GraphQLObjectType({
  name: "Dish",
  fields: () => ({
    ...commonDishFields,
    restaurant: { type: RestaurantType },
    branch: { type: BranchType },
    category: { type: CategoryType },
    subcategory: { type: SubCategoryType },
    ingredients_options: { type: new GraphQLList(DIngredientsType) },
  }),
});

export const CreateDishInputType = new GraphQLInputObjectType({
  name: "CreateDishInput",
  fields: {
    ...commonDishFields,
    ingredients_options: {
      type: new GraphQLList(DIngredientInputType),
    },
    customization_groups: { type: DCustomizationType },
  },
});
